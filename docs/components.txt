Trabalhando com components:

Basicamente a estrutura do projeto referencia dois tipos de arquivo, o component e seu style. No projeto o style está sendo feito por style component.

Tomando como exemplo o Input:
- Na pasta components eu crio um diretório chamado input;
- Dentro deste diretório eu crio dois arquivos: o Input.tsx (Que será o Component que será utilizado) e o input.style.ts (que será o arquivo de estilização do component Input);

input.style.ts:
import styled from "styled-components/native";

export const ContainerInput = styled.TextInput`
    width: 100%;
    height: 50px;
    padding: 15px;
    background-color: white;
    color: #888;
    border-radius: 5px;
`
- Dentro desse arquivo eu crio a constante ContainerInput que servirá de base estilizada para o arquivo Input.tsx.

-----------------------------------------------------------------------------

Input.tsx:
import { TextInputProps } from "react-native";
import { ContainerInput } from "./input.style";

interface InputProps extends TextInputProps {}

const Input = ({...props}: InputProps) => {

    return (
        <ContainerInput {...props}/>
    )
}

export default Input;

- Dentro deste arquivo eu crio a constante Input (Que será utilizada na sintaxe <Input/> dentro dos módulos). Eu acrescento a tipagem nativa dos props utilizando o TextInputProps. Com isso o Input que criei herdará todos os métodos e props que o TextInput do React Native possui.






-----------------------------------------------------------------------------








EXEMPLO ACRESCENTANDO PROPS:

button.style.ts:
import styled from "styled-components/native";

interface ContainerButtonProps {
    margin?: string;
};

export const ContainerButton = styled.TouchableOpacity<ContainerButtonProps>`
    width: 100%;
    height: 50px;
    border-radius: 5px;
    justify-content: center;
    align-items: center;
    ${(props) => ( props.margin ? `margin: ${props.margin};` : '')}

    background-color: blue;
`;

Neste caso é criada uma inteface ContainerButtonProps e que pode receber o atributo 'margin'. Na versão 5.3.9 do styled-components para tipar a props no interior do atributo 'styled', deve ser passada a interface após o tipo de componente (neste exemplo o TouchableOpacity) entre <>.




Button.tsx:
import { Text } from "react-native";
import { TouchableOpacityProps } from "react-native/types"
import { ContainerButton } from "./button.style";

interface ButtonProps extends TouchableOpacityProps {
    title: string,
    margin?: string
}

const Button = ({title, margin, ...props}: ButtonProps) => {

    return (
        <ContainerButton margin={margin} {...props}>
            <Text>{title}</Text>
        </ContainerButton>
    )

}

export default Button;
Neste caso estende-se a interface ButtonProps acrescentando o atributo margin. A tag <ContainerButton> poderá receber a props margin, pois já foi configurada essa possibilidade no button.style.ts.


Para utilizar a tag Button agora, segue exemplo do Login.tsx:
<Button margin="15px" title="ENTRAR" onPress={handleOnPress}/>